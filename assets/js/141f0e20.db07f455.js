"use strict";(self.webpackChunkzell_chaos=self.webpackChunkzell_chaos||[]).push([[1917],{98578:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>l,frontMatter:()=>a,metadata:()=>i,toc:()=>d});var n=o(85893),s=o(11151);const a={layout:"posts",title:"Not produce duplicate Keys",date:new Date("2021-11-11T00:00:00.000Z"),categories:["chaos_experiment","bpmn"],tags:["data"],authors:"zell"},r="Chaos Day Summary",i={permalink:"/zeebe-chaos/2021/11/11/Not-produce-duplicate-Keys",editUrl:"https://github.com/zeebe-io/zeebe-chaos/blob/master/chaos-days/blog/2021-11-11-Not-produce-duplicate-Keys/index.md",source:"@site/blog/2021-11-11-Not-produce-duplicate-Keys/index.md",title:"Not produce duplicate Keys",description:"Due to some incidents and critical bugs we observed in the last weeks, I wanted to spent some time to understand the issues better and experiment how we could detect them. One of the issue we have observed was that keys were generated more than once, so they were no longer unique (#8129). I will describe this property in the next section more in depth.",date:"2021-11-11T00:00:00.000Z",formattedDate:"November 11, 2021",tags:[{label:"data",permalink:"/zeebe-chaos/tags/data"}],readingTime:5.425,hasTruncateMarker:!0,authors:[{name:"Christopher Zell",title:"Chaos Engineer @ Zeebe",url:"https://github.com/zelldon",imageURL:"https://github.com/zelldon.png",key:"zell"}],frontMatter:{layout:"posts",title:"Not produce duplicate Keys",date:"2021-11-11T00:00:00.000Z",categories:["chaos_experiment","bpmn"],tags:["data"],authors:"zell"},unlisted:!1,prevItem:{title:"Worker count should not impact performance",permalink:"/zeebe-chaos/2021/11/24/Worker-count-should-not-impact-performance"},nextItem:{title:"Throughput on big state",permalink:"/zeebe-chaos/2021/10/29/Throughput-on-big-state"}},c={authorsImageUrls:[void 0]},d=[];function u(e){const t={a:"a",p:"p",strong:"strong",...(0,s.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(t.p,{children:["Due to some incidents and critical bugs we observed in the last weeks, I wanted to spent some time to understand the issues better and experiment how we could detect them. One of the issue we have observed was that keys were generated more than once, so they were no longer unique (",(0,n.jsx)(t.a,{href:"https://github.com/camunda-cloud/zeebe/issues/8129",children:"#8129"}),"). I will describe this property in the next section more in depth."]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"TL;DR;"})," We were able to design an experiment which helps us to detect duplicated keys in the log. Further work should be done to automate such experiment and run it agains newer versions."]})]})}function l(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(u,{...e})}):u(e)}},11151:(e,t,o)=>{o.d(t,{Z:()=>i,a:()=>r});var n=o(67294);const s={},a=n.createContext(s);function r(e){const t=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),n.createElement(a.Provider,{value:t},e.children)}}}]);